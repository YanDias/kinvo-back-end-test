// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

namespace Repository.Aliquiota.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20210831043236_DbKinvo")]
    partial class DbKinvo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Aliquiota.Banco", b =>
                {
                    b.Property<int>("idBanco")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<int>("Numero");

                    b.HasKey("idBanco");

                    b.ToTable("Bancos");
                });

            modelBuilder.Entity("Domain.Aliquiota.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cpf")
                        .HasColumnType("Numeric(12)");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("IdCliente");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Domain.Aliquiota.Conta", b =>
                {
                    b.Property<int>("IdConta")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BancoidBanco");

                    b.Property<int?>("ClienteIdCliente");

                    b.Property<decimal>("NumeroConta")
                        .HasColumnType("Numeric(9)");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Senha")
                        .IsRequired();

                    b.HasKey("IdConta");

                    b.HasIndex("BancoidBanco");

                    b.HasIndex("ClienteIdCliente");

                    b.ToTable("Contas");
                });

            modelBuilder.Entity("Domain.Aliquiota.Investimento", b =>
                {
                    b.Property<int>("IdInvestimento")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContaIdConta");

                    b.Property<DateTime>("DataAplicacao");

                    b.Property<DateTime>("DataResgate");

                    b.Property<int?>("ProdutoIdProduto");

                    b.Property<decimal>("ValorInvestido")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("ValorRecolhidoIR")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("ValorResgatadoBruto")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("ValorResgatadoLiquido")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("IdInvestimento");

                    b.HasIndex("ContaIdConta");

                    b.HasIndex("ProdutoIdProduto");

                    b.ToTable("Investimentos");
                });

            modelBuilder.Entity("Domain.Aliquiota.Produto", b =>
                {
                    b.Property<int>("IdProduto")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ano_Maior_IR");

                    b.Property<int>("Ano_Menor_IR");

                    b.Property<int>("BancoidBanco");

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<decimal>("Rendimento")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("Taxa_Entre_IR")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("Taxa_Maior_IR")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("Taxa_Menor_IR")
                        .HasColumnType("decimal(4,2)");

                    b.Property<int>("Tempo_Rendimento_Dias");

                    b.HasKey("IdProduto");

                    b.HasIndex("BancoidBanco");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("Domain.Aliquiota.Conta", b =>
                {
                    b.HasOne("Domain.Aliquiota.Banco", "Banco")
                        .WithMany()
                        .HasForeignKey("BancoidBanco")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Aliquiota.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteIdCliente");
                });

            modelBuilder.Entity("Domain.Aliquiota.Investimento", b =>
                {
                    b.HasOne("Domain.Aliquiota.Conta", "Conta")
                        .WithMany()
                        .HasForeignKey("ContaIdConta");

                    b.HasOne("Domain.Aliquiota.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoIdProduto");
                });

            modelBuilder.Entity("Domain.Aliquiota.Produto", b =>
                {
                    b.HasOne("Domain.Aliquiota.Banco", "Banco")
                        .WithMany()
                        .HasForeignKey("BancoidBanco")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
